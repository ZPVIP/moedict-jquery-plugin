// Generated by LiveScript 1.2.0
/**
 * moedict for jQuery plugin
 *
 * 將您的網站萌化
 */
(function(){
  (function($){
    var moedictConfig;
    moedictConfig = {
      initialized: false,
      regex: null
    };
    window._moedictDataCallback = function(data){
      var keys, words;
      if (data.lenToRegex != null) {
        keys = Object.keys(data.lenToRegex).sort(function(a, b){
          return b - a;
        });
        words = [];
        keys.forEach(function(k){
          return words.push(data.lenToRegex[k]);
        });
        moedictConfig.regex = new RegExp(words.join('|'), 'g');
        return moedictConfig.initialized = true;
      }
    };
    /**
     * moedict plugin function
     *
     * @param config options Object
     *               class: 'someClass' css class for word link
     *               spaced: true - add space for words
     *               draw: true - using moedict draw mode
     *               analyze: true - return words analyzation
     *               dryrun: true - return replaced html
     *               callback: function - receive analyze or dryrun data
     *
     * $('#content').moedict();
     */
    $.fn.moedict = function(config){
      var replaceContent, initRegexp, this$ = this;
      config = $.extend({
        'class': 'moedict-word',
        spaced: false,
        draw: false,
        analyze: false,
        dryrun: false,
        callback: null
      }, config);
      replaceContent = function(){
        this$.each(function(){
          var $elem, text, wordUsage, html, newHtml;
          $elem = $(this);
          if (config.analyze) {
            text = $elem.text();
            wordUsage = {};
            text.replace(moedictConfig.regex, function(w){
              if (wordUsage[w]) {
                return wordUsage[w]++;
              } else {
                return wordUsage[w] = 1;
              }
            });
            if (config.callback) {
              return config.callback.call($elem, wordUsage);
            }
          } else {
            html = $elem.html();
            newHtml = html.replace(moedictConfig.regex, function(w){
              var buf;
              if (config.draw) {
                buf = "<a href='https://www.moedict.tw/?draw#" + w + "' class='" + config['class'] + "'>" + w + "</a>";
              } else {
                buf = "<a href='https://www.moedict.tw/#" + w + "' class='" + config['class'] + "'>" + w + "</a>";
              }
              if (config.spaced) {
                buf += " ";
              }
              return buf;
            });
            if (config.dryrun) {
              if (config.callback) {
                return config.callback.call($elem, newHtml);
              }
            } else {
              $elem.html(newHtml);
              return $elem.find("a." + config['class']).hoverIntent({
                timeout: 250,
                out: function(){},
                over: function(){
                  var href;
                  jQuery('#moedict').remove();
                  href = jQuery(this).attr('href');
                  return jQuery("<iframe id='moedict' name='moedict' src='" + href + "' style='float: right; height: 90%; width: 40%; margin: 0; border-radius: 20px' />").prependTo('body');
                }
              });
            }
          }
        });
        return this$;
      };
      initRegexp = function(cb){
        $.ajax({
          type: 'GET',
          dataType: 'jsonp',
          jsonp: false,
          cache: true,
          jsonCallback: '_moedictDataCallback',
          url: 'https://www.moedict.tw/lenToRegex.a.json.js',
          complete: function(){
            if (cb) {
              return cb.call();
            }
          }
        });
        return moedictConfig.initialized;
      };
      if (!moedictConfig.initialized) {
        return initRegexp(replaceContent);
      } else {
        return replaceContent();
      }
    };
  }.call(this, jQuery));
}).call(this);
